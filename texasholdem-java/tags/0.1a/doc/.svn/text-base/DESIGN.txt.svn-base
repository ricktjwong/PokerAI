Design
======

Limit Texas Hold'em

Big blind:   Any even size
Small blind: Half of big blind

Fixed bets/raises:
- Pre-Flop and Flop: 1x big blind
- Turn/River:        2x big blind

Phases:
- Pre-Flop: Hole cards (2 per player), betting round
- Flop:     3 cards on the board),     betting round
- Turn:     1 extra card on the board, betting round
- River:    1 extra card on the board, betting round
- Showdown

Actions:
- bet == 0: Check, Bet,   Fold
- bet > 0:  Call,  Raise, Fold
- all-in:   Call

Bet/Raise: All other players must act again (Call, Raise, Fold), bet/raised player has the final option (Call, Raise, Fold)

Max. raises per betting round: 4, except when only 2 players left (Heads-up mode)

All-in:
- If a player uses all of his remaining cash to call (partially or full), he goes all-in.
- All-in player must stay in hand until showdown, without acting.
- At the showdown, each active player is processed, in order of the best hand to worst:
  if he is NOT all-in, he wins the pot (done), otherwise (all-in) he wins his participation in the pot (next player). 

Showdown:
- First, all non-all-in players compete for the main pot (total pot minus all side pots).
- Secondly, per all-in player, all players compete for that player's side pot.


Hand phases
-----------

- Rotate the dealer position.
- Post the Small Blind and Big Blind.
- Deal the 2 Hole cards per player.
- Pre-Flop betting round.
- Deal the 3 Flop cards on the board.
- Flop betting round.
- Deal the Turn card on the board.
- Turn betting round.
- Deal the River card on the board.
- River betting round.
- Showdown.


Action types
------------

enum Action {
	CHECK
	CALL
	BET
	RAISE
	FOLD
}


All-in pot division
-------------------

Example 1:

A: SB 1 (C: 2, P: 1, T: 1)
B: BB 2 (C: 2, P: 2, T: 3)
C: C  2 (C: 2, P: 2, T: 5)
D: C  2 (C: 2, P: 2, T: 7)

A: C  1 (C: 2, P: 2, T: 8)
B: B  2 (C: 4, P: 4, T: 10) * All-in
C: R  2 (C: 6, P: 6, T: 14) * All-in
D: C  4 (C: 6, P: 6, T: 18)

A: C  4 (C: 6, P: 6, T: 22)
B: -    (C: 6, P: 4, T: 22)
C: -    (C: 6, P: 6, T: 22)
D: B  2 (C: 8, P: 8, T: 24)

A: C 2  (C: 8, P: 8, T: 26)
B: -    (C: 8, P: 4, T: 26)
C: -    (C: 8, P: 6, T: 26)
D: C    (C: 8, P: 8, T: 26)

= A/D: 26
= B: 10, A/D: 26 - 10 = 16
= B: 10 (26 - 10 = 16), C: 14, A/D: 16 - 14 = 2
= C: 14, A/D: 26 - 14 = 12
= C: 14 (26 - 14 = 12), B: 10, A/D: 12 - 10 = 2

Example 2:

A: SB 1 (C: 2, P: 1, T: 1)
B: BB 2 (C: 2, P: 2, T: 3)
C: C  2 (C: 2, P: 2, T: 5)
D: C  2 (C: 2, P: 2, T: 7)

A: C  1 (C: 2, P: 2, T: 8)
B: B  2 (C: 4, P: 4, T: 10) * All-in
C: R  2 (C: 6, P: 6, T: 14) * All-in
D: F    (C: 6, P: 2, T: 14)

A: C  4 (C: 6, P: 6, T: 18)
B: -    (C: 6, P: 4, T: 18)
C: -    (C: 6, P: 6, T: 18)
D: F    (C: 6, P: 2, T: 18)

= A: 18
= B: 10, A: 18 - 10 = 8
= B: 10 (18 - 10 = 8), C: 14 > 8 => 8
= C: 14, A: 18 - 14 = 4
= C: 14 (18 - 14 = 4), B: 10 > 4 => 4

With a tie:

Example:

A 1000 50
B 1000 50
C  850 50

Tie A, B:
A: 50 / 2 = 25
B: 50 / 2 = 25


Example:

A 1000 10 AI
B 1000 20 AI
C  850 50
D  200 50

Tie A, B:
A: 10
B: 20
C: 50 - 10 - 20 = 20


Example:

A 1000 50
B 1000 10 AI
C  850 50

Tie A, B:
A: 50 - 10 = 40
B: 10



Classes
-------

class Deck {
	-cards : Card[]
	+shuffle()
	+deal() : Card
	+deal(int noOfCards) : Card[]
	+deal(int rank, int suit) : Card
	+reset()
}

class Card {
    -rank : int
    -suit : int
    +Card(int rank, int suit)
    +Card(String s)
    +getRank() : int
    +getSuit() : int
}

class Hand {
    -cards : Card[]
    -noOfCards : int
    +Hand()
    +getNoOfCards() : int
    +addCard(card : Card)
    +addCards(cards : Card[])
    +addCards(cards : Collection<Card>)
    +clear()
}

class Server {
    -tables : List<Table>
    +Server(noOfTables : int)
    +start()
    +stop()
    +createAccount(String username, String password)
    +login(String username, String password)
    +logout(String username)
    +buyChips(String username, int amount)
    +joinTable(String username, int tableNumber)
    +leaveTable(String username)
}

class Account {
    -username : String
    -password : String
    -chips : int
}

class Table {
    -bigBlind : int
    -players : Map<String, Player>
    -activePlayers : Map<String, Player>
    -deck : Deck
    -board : List<Card>
    -bet : int
    -pot : int
    +Table(bigBlind : int)
    +start()
    +stop()
    +addPlayer(Player player)
    +removePlayer(Player player)
}

class Player {
    -name : String
    -position : int
    -cash : int
    -client : Client
    -isDealer : boolean
    -isActor : boolean
    -cards : Card[]  // Confidential, only set when appropriate!
    -bet : int
    -action : Action
    -raises : int
    +Player(String name, int cash, Client client)
}

interface Client {
    +joinedTable(int tableNumber, int bigBlind, List<Player> players, int position)
    +leftTable()
    +playerJoined(Player player)
    +playerLeft(Player player)
    +dealerRotated(Player dealer)
    +actorRotated(Player actor)
    +dealPocketCards(Card[] cards)
    +boardUpdated(List<Card> cards)
    +playerActed(Player player)
    +act(Set<Action> allowedActions) : Action
}


Bot algorithm
-------------

Factors:
- pocket cards (Chen formula)
- community cards
  - potential duplicates (more than One Pair)
  - potential straight
  - potential flush
- number of players
- table position
- bet
- pot
- cash
- actions from earlier table positions
- bluffing
- opponent behavior
  - bet
  - cash
  - tightness (loose/tight)
  - aggression (passive/aggressive)
  - bluffing
